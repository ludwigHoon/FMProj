/*
Refer to Sequences for Objectives 1-3
Objectives 4-8:
4. Calculate the percentage of differences at different location for an allelic profile.
5. Calculate the Simpson’s index of the SNP at a location.
6. Show user how the sequence types are categorised given any number of SNP.
7. Find the SNP that returns the highest Simpson’s index at each level.
8. Include/exclude certain SNPs in Simpson’s search.
*/
class minSNP

instance variables
public data : Sequences:= new Sequences();
public dseq : map Sequences`typeName to Sequences`gene:= data.getSequence();
public length : nat:=0;
public included : set of nat1:= {};
public excluded : set of nat1:= {};
inv included inter excluded = {};

operations
-- Used to set data to be used for analysis later, invoking Sequences class
public setData: map Sequences`string to Sequences`string ==> ()
setData(input)==(
	data:=new Sequences(input);
	data.processInput();
	dseq:=data.getSequence();
	length:= let e in set rng dseq in len e
	);

-- Obj. 4 calculating percentage of dissimilarity at specified position given a target
--Genotypes = {Genotype1, ..., Genotype4}
--Genotype 1: a,c,t,g
--Genotype 2: a,t,c,g
--Genotype 3: c,a,g,a
--Genotype 4: c,t,a,g
--pcnDiff("Genotype1", 1) will return 66.67
--pcnDiff("Genotype1", 2) will return 100
public pcnDiff: Sequences`string * nat1 ==> real
pcnDiff(target, position) ==(
	dcl count : nat := 0;
	dcl allele : char := dseq(target)(position);
	for all al in set dom dseq
	do if dseq(al)(position) = allele
		then count := count + 1;
	return (   1-((count -1)/(card (dom dseq) -1)) )*100)
	pre target in set dom dseq;

-- Obj. 4 calculating the percentage of dissimilarity at all position
public pcnAnalysis: Sequences`string ==> map real to set of nat1
pcnAnalysis(target) ==(
	dcl result: map real to set of nat1 := {|->};
	for all a in set inds dseq(target)  --looping through all positions to calculate the percentage of dissimilarity at each position
	do if (not (pcnDiff(target, a) in set dom result))
	then result(pcnDiff(target, a)):= {a}  --first position to have the value
	else result(pcnDiff(target, a)):= result(pcnDiff(target, a)) union {a};  --adding another position to the set of positions having the same value
	return result);

-- Obj. 4 returning the set of positions with highest dissimilarity
public pcnPresent: Sequences`string ==> set of nat1
pcnPresent(target)==
	return pcnAnalysis(target)(sort(pcnAnalysis(target))(1));  --sort from highest to lowest and get only the highest

-- Obj. 8 setting the positions of SNP that must be included for analysis
public includeP: set of nat1 ==> ()
includeP(positions)==
	included:= positions;
	
-- Obj. 8 setting the positions of SNP that must be excluded for analysis
public excludeP: set of nat1 ==> ()
excludeP(positions)==
	excluded:= positions;

-- Obj. 5 generating the alignments at specified position for calculating Simpson index later
--gene = {"1"|->"abcd", "2"|->"acde", "3"|->"bcde"}
--alignment = {"1"|->"", "2"|->"", "3"|->""}
-- alignment:= alignA(alignment, 1) = {"1"|->"a", "2"|->"a", "3"|->"b"}
-- alignA(alignment, 2) = {"1"|->"ab", "2"|->"ac", "3"|->"bc"}
public alignA: map Sequences`typeName to Sequences`string * nat1 ==> map Sequences`typeName to Sequences`string
alignA(alignment, position)==(
	dcl res : map Sequences`typeName to Sequences`string := alignment;
	for all a in set dom dseq
	do res(a) := res(a) ^ [dseq(a)(position)];  --append alignment
	return res;
	); 

-- Obj. 5 calculating Simpson index
-- Simpson index = 
-- sum(n(n-1))  /   N(N-1), where n is the number of particular species & N is number of all species
public simpsonC : map Sequences`string to set of Sequences`typeName ==> real
simpsonC(alignment)==(
	dcl N: nat:= card dunion rng (alignment);
	dcl nSum: nat:= 0;
	for all e in set dom alignment 
	do nSum := nSum + (card (alignment(e))*(card (alignment(e))-1)); --sum(n(n-1))
	return nSum / (N* (N-1)); --sum(n(n-1)) / N(N-1)
	); 

-- Obj. 7 finding the SNP positions that return the highest index
public simpsonAnalysis: nat1 ==> map set of nat1 to real
simpsonAnalysis(level)==(
	dcl traversed : set of nat1:= {};
	dcl result : map set of nat1 to real:= {|->};
	dcl alignment: map Sequences`typeName to Sequences`string:= {a |-> "" | a in set dom dseq};
	dcl Ralignment: map Sequences`string to set of Sequences`typeName:={|->};
	for all e in set included   --generating alignment for included positions
		do (alignment:=alignA(alignment, e);
				traversed:=traversed union {e});
	Ralignment:= alignConvert(alignment);
	result:= { traversed |-> simpsonC(Ralignment)};	 --calculating simpson index for the generated alignment
	
	while level > card traversed  -- loop to check deeper 
	do (
		dcl localResult: map set of nat1 to real:= {|->};
		
		for all e in set {1, ..., length} \ (traversed union excluded)  --not looking at what has been traversed / excluded
		do (
			dcl localAlignment: map Sequences`typeName to Sequences`string:= alignment;
			dcl localRAlignment: map Sequences`string to set of Sequences`typeName:={|->};
			localAlignment:=alignA(localAlignment, e);
			localRAlignment:=alignConvert(localAlignment);
			localResult(traversed union {e}):= simpsonC(localRAlignment););  --map of different traversed positions and the respective index
			
		result(max(localResult)):=localResult(max(localResult));  --take the result with higest index
		traversed:= traversed union max(localResult);  --condiser that position as traversed
		
		);
	return result);
	
-- Obj. 6 categorising type according to SNP after alignments at specific positions have been generated.
--alignConvert({"1"|->"ab", "2"|->"ac", "3"|->"bc"}) = {"ab"|->{"1"}, "ac"|-> {"2"}, "bc"|->{"3"}}
--alignConvert({"1"|->"a", "2"|->"a", "3"|->"b"}) = {"a"|-> {"1","2"}, "b"|-> {"3"} }
public alignConvert: map Sequences`typeName to Sequences`string ==> map Sequences`string to set of Sequences`typeName
alignConvert(alignment)==(
	return { gene |-> {e | e in set dom alignment & alignment(e) = gene } 
		| gene in set rng alignment});

-- Obj. 6 showing the user how the types are categorised given SNP.
-- e.g. {"ab"|->{"1"}, "ac"|-> {"2"}, "bc"|->{"3"}}  showing 1,2,3 as distinct group
-- e.g. {"a"|-> {"1","2"}, "b"|-> {"3"} }  showing 1 and 2 grouped together and 3 in a distinct group
public simpsonPresent: nat1 ==> map Sequences`string to set of Sequences`typeName
simpsonPresent(level)==(
	dcl res: map set of nat1 to real:= simpsonAnalysis(level);
	dcl alignment: map Sequences`typeName to Sequences`string:= {a |-> "" | a in set dom dseq};
	for all a in set longest(res)
	do alignment:=alignA(alignment, a);
	return alignConvert(alignment);
	);

functions
private sort(res: map real to set of nat1) prdRes: seq of real
pre res <> {|->}
post forall i in set {1, ..., len prdRes -1 } & prdRes(i)>prdRes(i+1)
			and forall j in set inds prdRes & j in set dunion rng res;

private max(res: map set of nat1 to real) prdRes: set of nat1
post forall a in set dom res & (res(prdRes) >= res(a) and a <> prdRes);

private longest(res: map set of nat1 to real) prdRes: set of nat1
post forall a in set dom res & (card prdRes > card a and a<>prdRes);

end minSNP